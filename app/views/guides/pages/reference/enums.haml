- set_meta_tags title: 'Guide / Reference / Enums'

%h1 Enums

%p
  In Mint
  %b enums
  represents

  = succeed "," do
    %a(href="https://en.wikipedia.org/wiki/Algebraic_data_type") Algebraic Data Types

  with them it's possible to describe data which contains
  %b different types of values
  (called variants).

%p
  For example a type for a logged in state can be written as two variants:

%pre
  %code
    :escaped
      enum UserState {
        LoggedIn(User)
        Visitor
      }

%p since this is a type it can be used in type signatures:

%pre
  %code
    :escaped
      fun isLoggedIn (userState : UserState) : Bool {
        case userState {
          UserState::LoggedIn(user) => true
          UserState::Visitor => false
        }
      }

      isLoggedIn(UserState::LoggedIn(user)) /* true */
      isLoggedIn(UserState::Visitor) /* false */

%p
  as you can see from the code above you can create instances of the type by
  using its name then a double colon then its variant and then any arguments
  it takes
  %code UserState::LoggedIn(user)
  , you can also match the variants in a

  = succeed "." do
    %a(href="/guide/reference/control-expressions/case") case expression

%h2 Type variables

%p
  You can define
  %b type variables
  for an
  %b enum so it can become generic meaning that a type of a value of a variant
  can be any other type.

%p
  The best example for this is the
  %code Result(error, value)
  type:

%pre
  %code
    :escaped
      enum Result(error, value) {
        Err(error)
        Ok(value)
      }

%p
  which can be used with any types for error and value:

%pre
  %code
    :escaped
      /* A result where the error and value is both string */
      Result(String, String)

      /* An example result type for HTTP requests. */
      Result(Http.ErrorResponse, Response)
