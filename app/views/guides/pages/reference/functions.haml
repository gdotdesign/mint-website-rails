- set_meta_tags title: 'Guide / Reference / Functions'

%h1 Functions

%p Functions are callable pieces of code which:

%ul
  %li can take 0 or more parameters
  %li can have 1 or more statements / expressions
  %li
    can be defined in
    %b components, modules, stores,
    and
    %b providers

%p
  A function is defined by the
  %code fun
  keyword followed by its
  %b name, arguments
  and
  %b return type:

%pre
  %code
    :escaped
      module Greeter {
        fun greet (name : String) : Html {
          <div>
            <{ "Hello " + name + "!" }>
          </div>
        }
      }

%p Things to keep in mind:

%ul
  %li
    the name of the function must:
    %ul
      %li start with a lowercase letter
      %li contain only letters and numbers
  %li type annotations for the arguments are mandatory
  %li
    the return type annotation is optional, if not provided the return type will
    be inferred from the body of the function
  %li
    the parentheses for the arguments can be left off if the function does not
    take any arguments.

%h2 Calling a function

%p
  You call a function with its name, providing zero or more arguments separated
  by commas in parentheses.

%pre
  %code
    :escaped
      module Greeter {
        fun greet (name : String) : Html {
          <div>
            <{ "Hello " + name + "!" }>
          </div>
        }

        fun main : Html {
          greet("Bob")
        }
      }

%p
  If the function belongs to a
  %b store
  or a
  %b module
  you can call it like this:

%pre
  %code
    :escaped
      module Greeter {
        fun greet (name : String) : Html {
          <div>
            <{ "Hello " + name + "!" }>
          </div>
        }
      }

      component Main {
        fun render : Html {
          Greeter.greet("Bob")
        }
      }

%h2 Functions as arguments

%p
  You can define a function which takes a function as an argument. The type of
  this argument must be defined and must match the type of the actual function
  passed at runtime. The function can be an
  %b anonymous
  or
  %b named
  function.

%pre
  %code
    :escaped
      module Greeter {
        fun greet (name : String) : Html {
          <div>
            <{ "Hello " + name + "!" }>
          </div>
        }
      }

      component Main {
        fun renderGreeting (name : String, greeter : Function(String, Html)) : Html {
          greeter(name)
        }

        fun render : Html {
          renderGreeting("Bob", Greeter.greet)
        }
      }

%p
  Here we passed the
  %code Greeter.greet
  function as an argument.

%h2 Type of a function

%p
  Functions have a specific type signature, like everything else in Mint.
  The type for the function includes the types of its arguments (in parentheses)
  and the return value last in list.

%p For a function like:

%pre
  %code
    :escaped
      fun greet (name : String) : Html {
        <div>
          <{ "Hello " + name + "!" }>
        </div>
      }

%p the type is:

%pre
  %code
    :escaped
      Function(String, Html)

%p This can be read as:

%blockqoute
  A function which takes a
  %code String
  and returns
  %code Html

%h2 Anonymous functions

%p Anonymous functions look like this:

%pre
  %code
    :escaped
      (suffix : String, match : Regex.Match) : String { match.match + suffix }
      (event : Number) : Void { handleClick(event) }
      () : Void { 42 }

%p
  The anonymous function starts with one or more argument definitions enclosed
  by parentheses followed by the type definition after a colon
  %code :
  , then a single expression that determines the return value enclosed by
  brackets.

%p This can be used as an expression anywhere you would use a value:

%pre
  %code
    :escaped
      component Greeter {
        fun render : Html {
          <div onClick={(event : Html.Event) : String { Debug.log("Hello") }}>
            "Click Me!"
          </div>
        }
      }

%h2 Recursive Functions

%p All functions can be called recursively:

%pre
  %code.mint
    :escaped
      component Main {
        fun fibonacci(num : Number) : Number {
          if num <= 1 {
            1
          } else {
            fibonacci(num - 1) + fibonacci(num - 2)
          }
        }

        fun render : Html {
          <div>
            <{ fibonacci(10) }>
          </div>
        }
      }

%p.hint.hint--warning
  = octicon "alert"

  %span
    Be careful when using recursive functions, the type-checker does not check if
    there is an exit condition, if there is not it will cause an infinite loop.

%h2 Pipe operator

%p
  The pipe operator
  %code |>
  can be used to pipe an expression into a function as the first parameter:

%pre
  %code.mint
    :escaped
      " Joe   "
      |> String.toUppercase
      |> String.trim
      |> String.indent(2)

      /* Is the same as */
      String.indent(String.trim(String.toUppercase(" Joe   ")), 2)

%p
  Using this operator makes the code more readable.
