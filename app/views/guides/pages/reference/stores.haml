- set_meta_tags title: 'Guide / Reference / Stores'

%h1 Stores

%p
  Stores are global containers of application specific data. They are defined
  with the
  %code store
  keyword:

%pre
  %code
    :escaped
      store Counter.Store {
        state counter : Number = 0

        fun increment : Promise(Void) {
          next { counter: counter + 1 }
        }

        fun decrement : Promise(Void) {
          next { counter: counter - 1 }
        }
      }

%p
  In the example above, we defined a store for a global counter with a function
  to increment it and one to decrement it.

%p
  Stores are:

%ul
  %li
    %b global
    \- which means they are accessible from anywhere (for example:
    %code Counter.Store.counter
    ). This also means all accesses update the same, shared data.

  %li
    %b mutable
    \- their data can be changed using a
    %code next
    call (but only inside the store)

  %li
    they can only contain
    %b functions
    and
    %b states

%h2 States

%p
  States on a store define keys which correspond to specific type of values. They can be accessed by their name.

%h2 Connecting to components

%p
  Stores can be connected to components. To learn more, check out
  %a(href="/guide/reference/components/connecting-stores")
    components.

