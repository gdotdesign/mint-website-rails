- set_meta_tags title: 'Guide / Reference / Inlining JavaScript'

%h1 Inlining JavaScript

%p
  Since Mint itself compiles to
  %a(href="https://en.wikipedia.org/wiki/JavaScript")
    JavaScript
  , including additional JavaScript is pretty straightforward. Simply wrap the
  JavaScript in
  %b backticks
  anywhere you would write an expression. Mint assumes that the type of the
  value returned by this expression matches whatever is needed by the
  surrounding Mint code (but see
  %a(href="/guide/reference/javascript-interop/decode-expression")
    decoding
  for a way to safely convert it).

%p.hint.hint--warning
  = octicon "alert"
  %span
    Inlining allows you to invoke arbitrary JavaScript code. This can cause
    unexpected runtime errors. You can bypass the Mint type system, storing
    invalid data in Mint variables and cause Mint itself to be the source of
    the runtime error. Use it with care!

%p
  Here is an example inlining a call to the JavaScript function

  = succeed ":" do
    %a(href="https://developer.mozilla.org/en-US/docs/Web/API/Window/alert")
      Window.alert

%pre
  %code
    :escaped
      component Main {
        fun handleClick (event : Html.Event) : Void {
          `alert("Hello")`
        }

        fun render : Html {
          <div onClick={handleClick}>
            <{ "Click to alert!" }>
          </div>
        }
      }

%h2 Inlined JavaScript Statements

%p
  Since Mint is an expression based language, the inlined JavaScript code must
  also be an expression. If you need to execute multiple JavaScript statements,
  wrap the code in a

  = succeed ":" do
    %a(href="https://developer.mozilla.org/en-US/docs/Glossary/IIFE")
      Immediately Invoked Function Expression

%pre
  %code
    :escaped
      module Greeter {
        fun greet (name : String) : String {
          `
          (() => {
            const uppercaseName = \#{name}.toUpperCase()

            return "Hello " + uppercaseName + "!"
          })()
          `
        }
      }

%p.hint.hint--warning
  = octicon "alert"
  %span
    You should expect your code to be used in a
    %coe return
    statement.

%h2 Interpolation in inlined JavaScript Statements

%p
  In certain cases you might want access to the Mint scope (so to speak), you
  can do that by using the interpolation syntax
  %code \#{...}
  in inlined JavaScript. The code inside is evaluated in Mint in the current
  scope.

%pre
  %code
    :escaped
      module Greeter {
        get name : String {
          "Me"
        }

        fun greet : String {
          `
          (() => {
            return "Hello " + \#{name} + "!"
          })()
          `
        }
      }

%p.hint.hint--warning
  = octicon "alert"
  %span
    Generated interpolation code uses argument names like
    %code i
    and
    %code xyz
    , which can cause issues with shadowing or order of operations. To be safe,
    prefix your JavaScript variable names with a dollar sign, like
    %code $i
    \.

%h2 Specifying the type

%p
  To help the type checker, the type of an inlined JavaScript statement can be defined with the
  %code as
  keyword:

%pre
  %code
    :escaped
      `"Hello World!"` as String
