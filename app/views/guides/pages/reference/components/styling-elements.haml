- set_meta_tags title: 'Guide / Reference / Components / Styling Elements'

%h1 Styling Elements

%p Mint includes CSS support for styling HTML elements.

%p
  Within a component, you define styles with a
  %b style block
  named with an identifier:

%pre
  %code
    :escaped
      component Test {
        style base {
          font-family: sans;
          font-weight: bold;
          color: red;
        }

        fun render : Html {
          <div::base>
            Hello
          </div>
        }
      }

%p
  Then you apply the styles to an HTML element by specifying it after the tag of the element
  %code
    :escaped
      <div::style/>

%p
  You can have CSS definitions, sub rules, media queries,
  %code if
  and
  %code case
  expressions inside a
  %code style
  block.

%p
  You can even apply multiple styles to an HTML element:

%pre
  %code
    :escaped
      component Main {
        style a {
          color: red;
        }

        style b {
          background: blue;
        }

        fun render : Html {
          <div::a::b/>
        }
      }

%h2 Interpolation

%p
  Expressions can be interpolated in the value of a property using the
  interpolation syntax

  = succeed ":" do
    %code \#{...}

%pre
  %code
    :escaped
      component Test {
        style base {
          color: \#{color};
        }

        get color : String {
          "red"
        }

        fun render : Html {
          <div::base>
            Hello
          </div>
        }
      }

%p
  Here the color of the text evaluates to
  %code "red"

%h2 Arguments

%p
  A style block can take many arguments just like a function:

%pre
  %code
    :escaped
      component Main {
        style base(color : String) {
          color: \#{color};
        }

        fun render : Html {
          <div>
            <div::base("red")>
              "I am red!"
            </div>

            <div::base("blue")>
              "I am blue!"
            </div>
          </div>
        }
      }

%h2 Sub rules

%p
  Additional rules that match the element can be defined in the same block:

%pre
  %code
    :escaped
      component Test {
        style base {
          color: cyan;

          /* The ampersand character references the rule it resides in. */
          &:focus {
            color: red;
          }

          /* This is a sub rule which uses the descendant selector. */
          a {
            color: blue;
          }
        }

        fun render : Html {
          <div::base tabindex="0">
            <{ "Hello " }>
            <a>
              <{ "world" }>
            </a>
          </div>
        }
      }

%p
  This is useful for styling
  %b pseudo elements and states
  or styling child elements.

%h2
  %code @media

%p
  %a(href="https://www.w3.org/TR/css3-mediaqueries/")
    Media queries
  can be defined for a style or sub rule. When matched,
  their contents apply to all elements that match them.

%pre
  %code
    :escaped
      component Test {
        style base {
          color: red;

          @media (min-width: 600px) {
            color: blue;
          }
        }
        fun render : Html {
          <div::base>
            <{ "Hello " }>
          </div>
        }
      }

%h2
  %code @supports

%p
  %a(href="https://developer.mozilla.org/en-US/docs/Web/CSS/@supports")
    @supports
  can be defined for a style or sub rule. When matched,
  their contents apply to all elements that match them.

%pre
  %code
    :escaped
      component Test {
        style base {
          color: red;

          @supports (display: grid) {
            display: grid;
          }
        }
        fun render : Html {
          <div::base>
            <{ "Hello!!" }>
          </div>
        }
      }

%h2
  %code @font-face

%p
  %a(href="https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face")
    @font-face
  rules can be defined in a style block. The declaration will be global; meaning that any other component can reference that font.

%pre
  %code
    :escaped
      component Test {
        style base {
          @font-face {
            font-family: "Open Sans";
            src: url("/fonts/OpenSans-Regular-webfont.woff2") format("woff2"),
                 url("/fonts/OpenSans-Regular-webfont.woff") format("woff");
          }

          font-family: "Open Sans";
        }

        fun render : Html {
          <div::base>
            <{ "Hello!!" }>
          </div>
        }
      }

%h2
  %code @keyframes

%p
  %a(href="https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes")
    @keyframes
  rules can be defined in a style block. The declaration will be global; meaning that any other component can reference that animation.

%pre
  %code
    :escaped
      component Test {
        style base {
          @keyframes slidein {
            from {
              transform: translateX(0%);
            }

            to {
              transform: translateX(100%);
            }
          }

          animation: slidein 3s;
        }

        fun render : Html {
          <div::base>
            <{ "Hello!!" }>
          </div>
        }
      }

%h2 Nesting

%p
  %b
    Sub rules
  ,
  %b
    %code @media
  and
  %b
    %code @supports
  rules can be nested in each other infinitely:

%pre
  %code
    :escaped
      style base {
        color: red;

        div {
          color: blue;

          @supports (display: grid) {
            display: grid;

            b {
              font-weight: normal;
            }
          }

          span {
            color: yellow;

            @media (max-width: 500px) {
              font-weight: bold;
            }
          }
        }
      }

%h2 If and Case

%p
  A special version of
  %code if
  and
  %code case
  expressions can be used inside
  %code style
  blocks:

%pre
  %code
    :escaped
      style base {
        if (loading) {
          pointer-events: none;
          opacity: 0.5;
        }

        case (status) {
          Status::Ok => color: blue;
          Status::Err =>
            border: 1px solid red;
            color: red;
        }
      }

%p
  Style cases have some unique rules:

%ul
  %li one expression rule does not apply
  %li you can have one or more CSS definitions in each branch
  %li
    the
    %code else
    and empty case branch can be omitted

%h2 Inline Styles

%p
  You can use inline styles just like in HTML in two different ways:

%pre
  %code
    :escaped
      component Main {
        fun render : Html {
          <div>
            /* As a String */
            <div style="color: red;">
              "I am red!"
            </div>

            /* As a Map(String, String) */
            let style =
              Map.empty()
              |> Map.set("color", "red")

            <div style={style}>
              "I am red!"
            </div>
          </div>
        }
      }

%h2 Behind the scenes

%p
  The compiler separates properties that have interpolations from the ones
  that don't. The properties with interpolations are converted to use CSS
  variables (
  %code --test-base-color
  ).

%p
  During compiling the dynamic properties are converted to use a
  %code style
  object that contains the appropriate variables with their expressions.

%p
  The defined styles are static and added to the
  %code head
  of the document at runtime.

