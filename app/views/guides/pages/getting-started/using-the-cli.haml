- set_meta_tags title: 'Guide / Getting Started / Using the CLI'

%h1 Using the CLI

%p
  Once you install Mint you will have a
  %code mint
  binary at your disposal.

%p
  This is the help section (you can print this using the
  %code --help
  flag):

%pre
  %code.plaintext
    :plain
      mint --help
      Mint - Help
      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
      Usage:
        mint [flags...] [arg...]

      Mint

      Flags:
        --env, -e (default: "")  # Loads the given .env file
        --help                   # Displays help for the current command.

      Subcommands:
        build                    # Builds the project for production
        docs                     # Starts the documentation server
        format                   # Formats source files
        init                     # Initializes a new project
        install                  # Installs dependencies
        loc                      # Counts Lines of Code
        start                    # Starts the development server
        test                     # Runs the tests
        version                  # Shows version
      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

%h2 Initializing a new application

%p
  To initialize a new application, you invoke the binary with the
  %code init
  command:

%pre
  %code.plaintext
    mint init my-app

%p
  This will scaffold a new application in the
  %code my-app
  directory:

%pre
  %code.plaintext
    my-app
    ├── asssets
    │   └── head.html
    ├── source
    │   └── Main.mint
    ├── tests
    │   └── Main.mint
    ├── .gitignore
    └── mint.json

%p.hint.hint--info
  = octicon "info"
  %span
    After scaffolding a new project make sure to enter that directory and run commands from there.

%h2 Installing dependencies

%p
  You install dependencies by invoking the binary with the
  %code install
  command:

%pre
  %code.plaintext
    mint install

%p
  This builds a dependency tree of the packages and installs them by cloning their repositories from Git sources into the
  %code .mint
  directory.

%h2 Starting a development server

%p
  To start a development server for an application, just invoke the binary with the
  %code start
  command:

%pre
  %code.plaintext
    mint start

%p
  This will start the server at
  %a(href="http://localhost:3000") http://localhost:3000

%h2 Running tests

%p
  To run the test written for an application, just invoke the binary with the
  %code test
  command:

%pre
  %code.plaintext
    mint test

%p
  This will:

%ul
  %li compile the application including the tests
  %li open a browser in headless mode
  %li run the tests in the browser printing the results along the way

%p
  The test command contains several flags you can set, such as which browser to use:

%pre
  %code.plaintext
    :escaped
      mint test --help
      Usage:
        mint test [flags...] <test> [arg...]

      Runs the tests

      Flags:
        --browser, -b (default: "chrome")                                    # Which browser to run the tests in (chrome, firefox)
        --browser-host, -x (default: ENV["BROWSER_HOST"]? || "127.0.0.1")    # Target host, useful when hosted on another machine. (Default: 127.0.0.1)
        --browser-port, -c (default: (ENV["BROWSER_PORT"]? || "3001").to_i)  # Target port, useful when hosted on another machine. (Default: 3001)
        --env, -e (default: "")                                              # Loads the given .env file
        --help                                                               # Displays help for the current command.
        --host, -h (default: ENV["HOST"]? || "127.0.0.1")                    # Host to serve the tests on. (Default: 127.0.0.1)
        --manual, -m                                                         # Start the test server for manual testing
        --port, -p (default: (ENV["PORT"]? || "3001").to_i)                  # Port to serve the tests on. (Default: 3001)
        --reporter, -r (default: "dot")                                      # Which reporter to use (dot, documentation)

      Arguments:
        test

%p
  Currently both
  %code chrome
  and
  %code firefox
  are supported.

%h2 Building for production

%p
  To build the application for production deployment, invoke the binary with the
  %code build
  command:

%pre
  %code.plaintext
    mint build

%p This will:

%ul
  %li
    generate the
    %code index.html
    file

  %li eliminate dead code

  %li compile the application in production mode

  %li if a base icon is provided, generate favicons in different sizes

  %li
    copy all static files from the
    %code public
    directory

  %li
    create a service worker and manifest file

%h2 Browsing documentation of installed packages

%p
  To browse the documentation of the application and installed packages, invoke the binary with the
  %code docs
  command:

%pre
  %code.plaintext
    mint docs

%p
  It starts a documentation server which can be accessed at
  %a(href="http://localhost:3002") http://localhost:3002

