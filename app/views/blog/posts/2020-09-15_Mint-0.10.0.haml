- set_meta_tags title: "Blog / 0.10.0"

%p
  %a(href="https://github.com/mint-lang/mint/releases/tag/0.10.0" target="_blank")
    Mint 0.10.0
  has been released!

%p
  This release comes with changes to providers, bug fixes and introduces directives.

%p
  There are
  %a(href="https://github.com/mint-lang/mint/compare/0.9.0...0.10.0" target="_blank")
    184 commits since 0.9.0
  by 8 contributors.

%p
  Letâ€™s review some highlights in this release. But donâ€™t miss out on the rest of the
  %a(href="https://github.com/mint-lang/mint/releases/tag/0.10.0" target="_blank") release changelog
  which has a lot of valuable information.

%h2 Directives

%p
  This release adds the
  %code @svg
  ,
  %code @format
  and
  %code @documentation
  directives.

%p
  Directives are processed at compile time. They interact both with the code and outside of them (for example, files).

%h3 @svg

%p
  The
  %code @svg
  directive embeds the SVG at the given path (relative to the source file) as
  %code Html
  so it can be used directly in components:

%pre
  %code
    :escaped
      <div>
        <{ @svg(../path/to/some/icon.svg) }>
      </div>

%p
  The use case for this directive is embeddig custom icons and illustartions without the need to convert them to Mint code.

%h3 @format

%p
  The
  %code @format
  directive returns the result of given expression and its formatted code as a tuple
  %code Tuple(a, String):

%pre
  %code
    :escaped
      {result, code} =
        @format {
          <div>
            "Hello There!"
          </div>
        }

      <div>
        <{ result }>

        <pre>
          <code>
            <{ code }>
          </code>
        </pre>
      </div>

%p
  The use case for this directive is to make it easier to show an example of a Mint code.

%h3 @documentation

%p
  The
  %code @documentation
  directive generates and inlines the documentation of a component as a JavaScript object which can be used later on to display said documenation:

%pre
  %code
    :escaped
      record Component {
        name : String
      }

      try {
        decoded =
          decode @documentation(Main) as Component

        decoded.name
      }

%h2 Updates to Providers

%p
  Providers got overhauled in this release, it is possible to write a provider entirely in Mint.

%p
  Providers now work like stores: they can have states, constants and getters, the
  %code next
  keyword can also be used.

%p
  Here is a simple provider that broadcasts the number of subscribers.

%pre
  %code
    :escaped
      record SubscriberCount.Subscription {
        update : Function(Number, Promise(Never, Void))
      }

      provider SubscriberCount : SubscriberCount.Subscription {
        fun update {
          try {
            count =
              Array.size(subscriptions)

            for (subscriber of subscriptions) {
              subscriber.update(count)
            }
          }
        }
      }

%p
  Also a bunch of new providers has added to the standard library:

%ul
  %li
    %code Provider.ElementSize
    \- track the size of an element
  %li
    %code Provider.Intersection
    \- track whether or not an element is in the viewport
  %li
    %code Provider.Keydown
    \- track global keydown events (window)
  %li
    %code Provider.Keyup
    \- track global keyup events (window)
  %li
    %code Provider.Mutation
    \- track mutation events of an element
  %li
    %code Provider.OutsideClick
    \- track clicks outside of element(s)
  %li
    %code Provider.TabFocus
    \- track focus in and out events of an element
  %li
    %code Provider.Url
    \- track changes to the URL (window)
  %li
    %code Provider.WebSocket
    \- track websocket connections

%h2 Keyword parameters for Enums

%p
  Enums now can have named parameters:

%pre
  %code
    :escaped
      enum Item {
        Link(name : String, href : String)
      }

      Item::Link(name = "Home", href = "/")

%p
  This way there is no need to define a record for an enum item.

%h2 Updates to Html expressions

%p
  Html expressions can now be used in attributes:

%pre
  %code
    :escaped
      <Field label=<{ "Hello" }>/>

%p
  also they can now be used as normal experssions:

%pre
  %code
    :escaped
      try {
        label =
          <{ "Hello" }>

        <Field label={label}/>
      }

%p
  and they now supports multiple expressions (without needing Html expressions):

%pre
  %code
    :escaped
      <{
        "String"

        <div>
          "Hello"
        </div>

        if (Html.isNotEmpty(content)) {
          content
        } else {
          <{}>
        }
      }>

%h2 Updates to the standard library

%p
  = succeed ',' do
    %b 41 new functions added

  = succeed ',' do
    %b wrappers for 5 new web APIs

  and a new module added for
  %b validating data.

%h2 Next steps

%p
  Please update your Mint and report any issues. We will keep moving forward and start the development focusing on 0.11.0.

%hr

%p
  Special thanks to
  %b @Sija
  for doing an throughouh review of the code and updating Mint for Crystal 0.35.1 and to
  %b @sokil
  for helping with the issues on Github ðŸŽ‰
